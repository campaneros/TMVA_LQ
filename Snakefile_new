configfile: "config_new.yaml"




rule all:
	input:
		first = expand('{dir}_1Muons/LQ_{masss}_{couplings}.png', dir=config["signal_directory"], masss=config["mass"], couplings= config["lambda"]),
		second = expand('{dir}_2Muons/LQ_{masss}_{couplings}.png',dir=config["signal_directory"], masss=config["mass"], couplings= config["lambda"])


rule Create_dataset:
	input: 
	   script = 'Classificator_create_dataset_reduced.py',
	   config = 'makePlots_datasetlists.txt'
	output:
		directory(config["first_directory"])
	shell:
		'python3 {input.script} -c {input.config} -o {output}'

rule Create_file_1muons:
	input:
		script = 'Create_file_list.py',
		config = 'makePlots_datasetlists.txt',
		dir = expand(rules.Create_dataset.output)
	output:
		config["reduced_dataset_1muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} -d {input.dir}'

rule run_BDT_1muons:
	input:
		script = 'Classificator_1muon.py',
		config = expand(rules.Create_file_1muons.output)
	output:
		config["file_TMVA_1muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} > BDT_1muons.log'

rule apply_BDT_1muons:
	input:
		script = 'App_Classificator_1muons.py',
		config = expand(rules.Create_file_1muons.output),
		filename = expand(rules.run_BDT_1muons.output)
	output:
		directory(config["second_directory_1Muons"])
	shell:
		'python3 {input.script} -c {input.config} -f {input.filename} -o {output}' 


rule Create_BDT_file_1muon:
	input:
		script = 'Create_file_list.py',
		config = expand(rules.Create_file_1muons.output),
		dir= expand(rules.apply_BDT_1muons.output)
	output:
		config["TMVA_reduced_dataset_1muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} -d {input.dir}'
		
rule Scan_BDT_1muon:
	input:
		script = 'Scan_BDT.py',
		config = expand(rules.Create_BDT_file_1muon.output)
	params:
		mass = config["mass"],
		lambd = config["lambda"],
		dire = config["signal_directory"]
	threads: 6
	output:
		expand('{dir}_1Muons/LQ_{masss}_{couplings}.png',dir=config["signal_directory"],masss=config["mass"], couplings= config["lambda"])
	shell:
		'for M in {params.mass}; do echo ${{M}}; for p in {params.lambd}; do python3 Scan_BDT.py -c {input.config} -o {params.dire}_1Muons --step 0.05 --mass ${{M}} --coupling ${{p}}; done;done'



rule Create_file_2muons:
	input:
		script = 'Create_file_list.py',
		config = 'makePlots_datasetlists.txt',
		dir = expand(rules.Create_dataset.output)
	output:
		config["reduced_dataset_2muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} -d {input.dir}'

rule run_BDT_2muons:
	input:
		script = 'Classificator_2muons.py',
		config = expand(rules.Create_file_2muons.output)
	output:
		config["file_TMVA_2muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} > BDT_2muons.log'

rule apply_BDT_2muons:
	input:
		script = 'App_Classificator_2muons.py',
		config = expand(rules.Create_file_2muons.output),
		filename = expand(rules.run_BDT_2muons.output)
	output:
		directory(config["second_directory_2Muons"])
	shell:
		'python3 {input.script} -c {input.config} -f {input.filename} -o {output}' 


rule Create_BDT_file_2muon:
	input:
		script = 'Create_file_list.py',
		config = expand(rules.Create_file_2muons.output),
		dir= expand(rules.apply_BDT_2muons.output)
	output:
		config["TMVA_reduced_dataset_2muon"]
	shell:
		'python3 {input.script} -c {input.config} -f {output} -d {input.dir}'
		
rule Scan_BDT:
	input:
		script = 'Scan_BDT.py',
		config = expand(rules.Create_BDT_file_2muon.output)
	params:
		mass = config["mass"],
		lambd = config["lambda"],
		dire = config["signal_directory"]
	threads: 6
	output:
		expand('{dir}_2Muons/LQ_{masss}_{couplings}.png',dir=config["signal_directory"],masss=config["mass"], couplings= config["lambda"])
	shell:
		'for M in {params.mass}; do echo ${{M}}; for p in {params.lambd}; do python3 Scan_BDT.py -c {input.config} -o {params.dire}_2Muons --step 0.05 --mass ${{M}} --coupling ${{p}}; done;done'

